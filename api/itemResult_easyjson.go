// AUTOGENERATED FILE: easyjson marshaler/unmarshalers.

package api

import (
	json "encoding/json"
	custom "github.com/antholord/poeIndexer/custom"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE73e0852DecodeGithubComAntholordPoeIndexerApi(in *jlexer.Lexer, out *ItemResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Item":
			easyjsonE73e0852DecodeGithubComAntholordPoeIndexerApi1(in, &out.Item)
		case "accountName":
			out.AccountName = string(in.String())
		case "lastCharacterName":
			out.LastCharacterName = string(in.String())
		case "id":
			out.StashId = string(in.String())
		case "stash":
			out.StashLabel = string(in.String())
		case "stashType":
			out.StashType = string(in.String())
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE73e0852EncodeGithubComAntholordPoeIndexerApi(out *jwriter.Writer, in ItemResult) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Item\":")
	easyjsonE73e0852EncodeGithubComAntholordPoeIndexerApi1(out, in.Item)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"accountName\":")
	out.String(string(in.AccountName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"lastCharacterName\":")
	out.String(string(in.LastCharacterName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.StashId))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"stash\":")
	out.String(string(in.StashLabel))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"stashType\":")
	out.String(string(in.StashType))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"error\":")
	out.String(string(in.Error))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ItemResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE73e0852EncodeGithubComAntholordPoeIndexerApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ItemResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE73e0852EncodeGithubComAntholordPoeIndexerApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ItemResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE73e0852DecodeGithubComAntholordPoeIndexerApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ItemResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE73e0852DecodeGithubComAntholordPoeIndexerApi(l, v)
}
func easyjsonE73e0852DecodeGithubComAntholordPoeIndexerApi1(in *jlexer.Lexer, out *Item) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "typeLine":
			out.Type = string(in.String())
		case "FName":
			out.FName = string(in.String())
		case "FNameUpper":
			out.FNameUpper = string(in.String())
		case "properties":
			if in.IsNull() {
				in.Skip()
				out.Properties = nil
			} else {
				in.Delim('[')
				if out.Properties == nil {
					if !in.IsDelim(']') {
						out.Properties = make([]ItemProperty, 0, 1)
					} else {
						out.Properties = []ItemProperty{}
					}
				} else {
					out.Properties = (out.Properties)[:0]
				}
				for !in.IsDelim(']') {
					var v1 ItemProperty
					easyjsonE73e0852DecodeGithubComAntholordPoeIndexerApi2(in, &v1)
					out.Properties = append(out.Properties, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "requirements":
			if in.IsNull() {
				in.Skip()
				out.Requirements = nil
			} else {
				in.Delim('[')
				if out.Requirements == nil {
					if !in.IsDelim(']') {
						out.Requirements = make([]ItemProperty, 0, 1)
					} else {
						out.Requirements = []ItemProperty{}
					}
				} else {
					out.Requirements = (out.Requirements)[:0]
				}
				for !in.IsDelim(']') {
					var v2 ItemProperty
					easyjsonE73e0852DecodeGithubComAntholordPoeIndexerApi2(in, &v2)
					out.Requirements = append(out.Requirements, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "customProperties":
			easyjsonE73e0852DecodeGithubComAntholordPoeIndexerCustom(in, &out.CProperties)
		case "sockets":
			if in.IsNull() {
				in.Skip()
				out.Sockets = nil
			} else {
				in.Delim('[')
				if out.Sockets == nil {
					if !in.IsDelim(']') {
						out.Sockets = make([]Socket, 0, 2)
					} else {
						out.Sockets = []Socket{}
					}
				} else {
					out.Sockets = (out.Sockets)[:0]
				}
				for !in.IsDelim(']') {
					var v3 Socket
					easyjsonE73e0852DecodeGithubComAntholordPoeIndexerApi3(in, &v3)
					out.Sockets = append(out.Sockets, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "nbSockets":
			out.NbSockets = int(in.Int())
		case "biggestLink":
			out.BiggestLink = int(in.Int())
		case "explicitMods":
			if in.IsNull() {
				in.Skip()
				out.ExplicitMods = nil
			} else {
				in.Delim('[')
				if out.ExplicitMods == nil {
					if !in.IsDelim(']') {
						out.ExplicitMods = make([]string, 0, 4)
					} else {
						out.ExplicitMods = []string{}
					}
				} else {
					out.ExplicitMods = (out.ExplicitMods)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.ExplicitMods = append(out.ExplicitMods, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "implicitMods":
			if in.IsNull() {
				in.Skip()
				out.ImplicitMods = nil
			} else {
				in.Delim('[')
				if out.ImplicitMods == nil {
					if !in.IsDelim(']') {
						out.ImplicitMods = make([]string, 0, 4)
					} else {
						out.ImplicitMods = []string{}
					}
				} else {
					out.ImplicitMods = (out.ImplicitMods)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.ImplicitMods = append(out.ImplicitMods, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "utilityMods":
			if in.IsNull() {
				in.Skip()
				out.UtilityMods = nil
			} else {
				in.Delim('[')
				if out.UtilityMods == nil {
					if !in.IsDelim(']') {
						out.UtilityMods = make([]string, 0, 4)
					} else {
						out.UtilityMods = []string{}
					}
				} else {
					out.UtilityMods = (out.UtilityMods)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.UtilityMods = append(out.UtilityMods, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "enchantMods":
			if in.IsNull() {
				in.Skip()
				out.EnchantMods = nil
			} else {
				in.Delim('[')
				if out.EnchantMods == nil {
					if !in.IsDelim(']') {
						out.EnchantMods = make([]string, 0, 4)
					} else {
						out.EnchantMods = []string{}
					}
				} else {
					out.EnchantMods = (out.EnchantMods)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.EnchantMods = append(out.EnchantMods, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "craftedMods":
			if in.IsNull() {
				in.Skip()
				out.CraftedMods = nil
			} else {
				in.Delim('[')
				if out.CraftedMods == nil {
					if !in.IsDelim(']') {
						out.CraftedMods = make([]string, 0, 4)
					} else {
						out.CraftedMods = []string{}
					}
				} else {
					out.CraftedMods = (out.CraftedMods)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.CraftedMods = append(out.CraftedMods, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cosmeticMods":
			if in.IsNull() {
				in.Skip()
				out.CosmeticMods = nil
			} else {
				in.Delim('[')
				if out.CosmeticMods == nil {
					if !in.IsDelim(']') {
						out.CosmeticMods = make([]string, 0, 4)
					} else {
						out.CosmeticMods = []string{}
					}
				} else {
					out.CosmeticMods = (out.CosmeticMods)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.CosmeticMods = append(out.CosmeticMods, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "note":
			out.Note = string(in.String())
		case "verified":
			out.IsVerified = bool(in.Bool())
		case "w":
			out.Width = int(in.Int())
		case "h":
			out.Height = int(in.Int())
		case "ilvl":
			out.ItemLevel = int(in.Int())
		case "icon":
			out.Icon = string(in.String())
		case "league":
			out.League = string(in.String())
		case "id":
			out.Id = string(in.String())
		case "identified":
			out.IsIdentified = bool(in.Bool())
		case "corrupted":
			out.IsCorrupted = bool(in.Bool())
		case "lockedToCharacter":
			out.IsLockedToCharacter = bool(in.Bool())
		case "support":
			out.IsSupport = bool(in.Bool())
		case "descrText":
			out.DescriptionText = string(in.String())
		case "secDescrText":
			out.SecondDescriptionText = string(in.String())
		case "flavourText":
			if in.IsNull() {
				in.Skip()
				out.FlavorText = nil
			} else {
				in.Delim('[')
				if out.FlavorText == nil {
					if !in.IsDelim(']') {
						out.FlavorText = make([]string, 0, 4)
					} else {
						out.FlavorText = []string{}
					}
				} else {
					out.FlavorText = (out.FlavorText)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.FlavorText = append(out.FlavorText, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "artFilename":
			out.ArtFilename = string(in.String())
		case "frameType":
			out.FrameType = FrameType(in.Int())
		case "stackSize":
			out.StackSize = int(in.Int())
		case "maxStackSize":
			out.MaxStackSize = int(in.Int())
		case "x":
			out.X = int(in.Int())
		case "y":
			out.Y = int(in.Int())
		case "inventoryId":
			out.InventoryId = string(in.String())
		case "socketedItems":
			if in.IsNull() {
				in.Skip()
				out.SocketedItems = nil
			} else {
				in.Delim('[')
				if out.SocketedItems == nil {
					if !in.IsDelim(']') {
						out.SocketedItems = make([]Item, 0, 1)
					} else {
						out.SocketedItems = []Item{}
					}
				} else {
					out.SocketedItems = (out.SocketedItems)[:0]
				}
				for !in.IsDelim(']') {
					var v11 Item
					easyjsonE73e0852DecodeGithubComAntholordPoeIndexerApi1(in, &v11)
					out.SocketedItems = append(out.SocketedItems, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "isRelic":
			out.IsRelic = bool(in.Bool())
		case "talismanTier":
			out.TalismanTier = int(in.Int())
		case "prophecyText":
			out.ProphecyText = string(in.String())
		case "prophecyDiffText":
			out.ProphecyDifficultyText = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE73e0852EncodeGithubComAntholordPoeIndexerApi1(out *jwriter.Writer, in Item) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"typeLine\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"FName\":")
	out.String(string(in.FName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"FNameUpper\":")
	out.String(string(in.FNameUpper))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"properties\":")
	if in.Properties == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v12, v13 := range in.Properties {
			if v12 > 0 {
				out.RawByte(',')
			}
			easyjsonE73e0852EncodeGithubComAntholordPoeIndexerApi2(out, v13)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"requirements\":")
	if in.Requirements == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v14, v15 := range in.Requirements {
			if v14 > 0 {
				out.RawByte(',')
			}
			easyjsonE73e0852EncodeGithubComAntholordPoeIndexerApi2(out, v15)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"customProperties\":")
	easyjsonE73e0852EncodeGithubComAntholordPoeIndexerCustom(out, in.CProperties)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sockets\":")
	if in.Sockets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v16, v17 := range in.Sockets {
			if v16 > 0 {
				out.RawByte(',')
			}
			easyjsonE73e0852EncodeGithubComAntholordPoeIndexerApi3(out, v17)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"nbSockets\":")
	out.Int(int(in.NbSockets))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"biggestLink\":")
	out.Int(int(in.BiggestLink))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"explicitMods\":")
	if in.ExplicitMods == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v18, v19 := range in.ExplicitMods {
			if v18 > 0 {
				out.RawByte(',')
			}
			out.String(string(v19))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"implicitMods\":")
	if in.ImplicitMods == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v20, v21 := range in.ImplicitMods {
			if v20 > 0 {
				out.RawByte(',')
			}
			out.String(string(v21))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"utilityMods\":")
	if in.UtilityMods == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v22, v23 := range in.UtilityMods {
			if v22 > 0 {
				out.RawByte(',')
			}
			out.String(string(v23))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"enchantMods\":")
	if in.EnchantMods == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v24, v25 := range in.EnchantMods {
			if v24 > 0 {
				out.RawByte(',')
			}
			out.String(string(v25))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"craftedMods\":")
	if in.CraftedMods == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v26, v27 := range in.CraftedMods {
			if v26 > 0 {
				out.RawByte(',')
			}
			out.String(string(v27))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cosmeticMods\":")
	if in.CosmeticMods == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v28, v29 := range in.CosmeticMods {
			if v28 > 0 {
				out.RawByte(',')
			}
			out.String(string(v29))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"note\":")
	out.String(string(in.Note))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"verified\":")
	out.Bool(bool(in.IsVerified))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"w\":")
	out.Int(int(in.Width))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"h\":")
	out.Int(int(in.Height))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ilvl\":")
	out.Int(int(in.ItemLevel))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"icon\":")
	out.String(string(in.Icon))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"league\":")
	out.String(string(in.League))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.Id))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"identified\":")
	out.Bool(bool(in.IsIdentified))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"corrupted\":")
	out.Bool(bool(in.IsCorrupted))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"lockedToCharacter\":")
	out.Bool(bool(in.IsLockedToCharacter))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"support\":")
	out.Bool(bool(in.IsSupport))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"descrText\":")
	out.String(string(in.DescriptionText))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"secDescrText\":")
	out.String(string(in.SecondDescriptionText))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"flavourText\":")
	if in.FlavorText == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v30, v31 := range in.FlavorText {
			if v30 > 0 {
				out.RawByte(',')
			}
			out.String(string(v31))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"artFilename\":")
	out.String(string(in.ArtFilename))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"frameType\":")
	out.Int(int(in.FrameType))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"stackSize\":")
	out.Int(int(in.StackSize))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"maxStackSize\":")
	out.Int(int(in.MaxStackSize))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"x\":")
	out.Int(int(in.X))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"y\":")
	out.Int(int(in.Y))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"inventoryId\":")
	out.String(string(in.InventoryId))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"socketedItems\":")
	if in.SocketedItems == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v32, v33 := range in.SocketedItems {
			if v32 > 0 {
				out.RawByte(',')
			}
			easyjsonE73e0852EncodeGithubComAntholordPoeIndexerApi1(out, v33)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"isRelic\":")
	out.Bool(bool(in.IsRelic))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"talismanTier\":")
	out.Int(int(in.TalismanTier))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"prophecyText\":")
	out.String(string(in.ProphecyText))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"prophecyDiffText\":")
	out.String(string(in.ProphecyDifficultyText))
	out.RawByte('}')
}
func easyjsonE73e0852DecodeGithubComAntholordPoeIndexerApi3(in *jlexer.Lexer, out *Socket) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group":
			out.GroupId = int(in.Int())
		case "attr":
			out.Attribute = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE73e0852EncodeGithubComAntholordPoeIndexerApi3(out *jwriter.Writer, in Socket) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"group\":")
	out.Int(int(in.GroupId))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"attr\":")
	out.String(string(in.Attribute))
	out.RawByte('}')
}
func easyjsonE73e0852DecodeGithubComAntholordPoeIndexerCustom(in *jlexer.Lexer, out *custom.CProperties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "armour":
			out.Armour = int(in.Int())
		case "es":
			out.Es = int(in.Int())
		case "evasion":
			out.Evasion = int(in.Int())
		case "block":
			out.Block = float64(in.Float64())
		case "crit":
			out.Crit = float64(in.Float64())
		case "quality":
			out.Quality = float64(in.Float64())
		case "weaponRange":
			out.WeaponRange = float64(in.Float64())
		case "type":
			out.Type = string(in.String())
		case "category":
			out.Category = string(in.String())
		case "subCategory":
			out.SubCategory = string(in.String())
		case "mapTier":
			out.MapTier = int(in.Int())
		case "aps":
			out.APS = float64(in.Float64())
		case "phys":
			out.Phys = float64(in.Float64())
		case "ele":
			out.Ele = float64(in.Float64())
		case "chaos":
			out.Chaos = float64(in.Float64())
		case "cdps":
			out.Cdps = float64(in.Float64())
		case "pdps":
			out.Pdps = float64(in.Float64())
		case "edps":
			out.Edps = float64(in.Float64())
		case "dps":
			out.Dps = float64(in.Float64())
		case "mods":
			if in.IsNull() {
				in.Skip()
				out.Mods = nil
			} else {
				in.Delim('[')
				if out.Mods == nil {
					if !in.IsDelim(']') {
						out.Mods = make([]custom.Mod, 0, 2)
					} else {
						out.Mods = []custom.Mod{}
					}
				} else {
					out.Mods = (out.Mods)[:0]
				}
				for !in.IsDelim(']') {
					var v34 custom.Mod
					easyjsonE73e0852DecodeGithubComAntholordPoeIndexerCustom1(in, &v34)
					out.Mods = append(out.Mods, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE73e0852EncodeGithubComAntholordPoeIndexerCustom(out *jwriter.Writer, in custom.CProperties) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"armour\":")
	out.Int(int(in.Armour))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"es\":")
	out.Int(int(in.Es))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"evasion\":")
	out.Int(int(in.Evasion))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"block\":")
	out.Float64(float64(in.Block))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"crit\":")
	out.Float64(float64(in.Crit))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"quality\":")
	out.Float64(float64(in.Quality))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"weaponRange\":")
	out.Float64(float64(in.WeaponRange))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"category\":")
	out.String(string(in.Category))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"subCategory\":")
	out.String(string(in.SubCategory))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mapTier\":")
	out.Int(int(in.MapTier))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"aps\":")
	out.Float64(float64(in.APS))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"phys\":")
	out.Float64(float64(in.Phys))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ele\":")
	out.Float64(float64(in.Ele))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"chaos\":")
	out.Float64(float64(in.Chaos))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cdps\":")
	out.Float64(float64(in.Cdps))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pdps\":")
	out.Float64(float64(in.Pdps))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"edps\":")
	out.Float64(float64(in.Edps))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"dps\":")
	out.Float64(float64(in.Dps))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mods\":")
	if in.Mods == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v35, v36 := range in.Mods {
			if v35 > 0 {
				out.RawByte(',')
			}
			easyjsonE73e0852EncodeGithubComAntholordPoeIndexerCustom1(out, v36)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}
func easyjsonE73e0852DecodeGithubComAntholordPoeIndexerCustom1(in *jlexer.Lexer, out *custom.Mod) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "modStr":
			out.ModStr = string(in.String())
		case "value1":
			out.Value1 = float64(in.Float64())
		case "value2":
			out.Value2 = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE73e0852EncodeGithubComAntholordPoeIndexerCustom1(out *jwriter.Writer, in custom.Mod) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"modStr\":")
	out.String(string(in.ModStr))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"value1\":")
	out.Float64(float64(in.Value1))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"value2\":")
	out.Float64(float64(in.Value2))
	out.RawByte('}')
}
func easyjsonE73e0852DecodeGithubComAntholordPoeIndexerApi2(in *jlexer.Lexer, out *ItemProperty) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([][]interface{}, 0, 2)
					} else {
						out.Values = [][]interface{}{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v37 []interface{}
					if in.IsNull() {
						in.Skip()
						v37 = nil
					} else {
						in.Delim('[')
						if v37 == nil {
							if !in.IsDelim(']') {
								v37 = make([]interface{}, 0, 4)
							} else {
								v37 = []interface{}{}
							}
						} else {
							v37 = (v37)[:0]
						}
						for !in.IsDelim(']') {
							var v38 interface{}
							if m, ok := v38.(easyjson.Unmarshaler); ok {
								m.UnmarshalEasyJSON(in)
							} else if m, ok := v38.(json.Unmarshaler); ok {
								m.UnmarshalJSON(in.Raw())
							} else {
								v38 = in.Interface()
							}
							v37 = append(v37, v38)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Values = append(out.Values, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "displayMode":
			out.DisplayMode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE73e0852EncodeGithubComAntholordPoeIndexerApi2(out *jwriter.Writer, in ItemProperty) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"values\":")
	if in.Values == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v39, v40 := range in.Values {
			if v39 > 0 {
				out.RawByte(',')
			}
			if v40 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v41, v42 := range v40 {
					if v41 > 0 {
						out.RawByte(',')
					}
					if m, ok := v42.(easyjson.Marshaler); ok {
						m.MarshalEasyJSON(out)
					} else if m, ok := v42.(json.Marshaler); ok {
						out.Raw(m.MarshalJSON())
					} else {
						out.Raw(json.Marshal(v42))
					}
				}
				out.RawByte(']')
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"displayMode\":")
	out.Int(int(in.DisplayMode))
	out.RawByte('}')
}
